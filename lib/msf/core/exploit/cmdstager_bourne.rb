# -*- coding: binary -*-
##
# $Id: cmdstager_bourne.rb
##

require 'msf/core/exploit/cmdstager'

module Msf

###
#
# This mixin provides an interface for staging cmd to arbitrary payloads
#
###
module Exploit::CmdStagerBourne

	include Msf::Exploit::CmdStager

	def initialize(info = {})
		super

		register_advanced_options(
			[
				OptString.new( 'DECODER',  [ true, 'The decoding binary to use.', 'base64']),
			], self.class)
	end

	def create_stager(exe)
		Rex::Exploitation::CmdStagerBourne.new(exe)
	end

	def generate_cmdstager(opts = {}, pl = nil)
		opts.merge!({ :decoder => datastore['DECODER'] })
		available_decoders = ['base64', 'openssl', 'python', 'perl']
		if not available_decoders.include?(opts[:decoder])
			print_error("Decoder must be one of #{available_decoders.join(', ')}")
			raise ArgumentError
		end
		super
	end
end

end
